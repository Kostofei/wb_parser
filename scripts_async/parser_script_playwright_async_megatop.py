import gc
import asyncio
import tracemalloc
from playwright.async_api import (async_playwright, TimeoutError as PlaywrightTimeoutError,
                                  Page, Playwright, Browser, BrowserContext)

from parser.decorators import timeit

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TARGET_URL = "https://www.wildberries.by"
EXCLUDED_CATEGORIES = ['–±—Ä–µ–Ω–¥—ã', 'wibes', '—ç–∫—Å–ø—Ä–µ—Å—Å', '–∞–∫—Ü–∏–∏', '–≥—Ä—É–∑–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞']


class EmptyCategoriesError(Exception):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    pass


@timeit
async def run_wb_parser():
    result = await parse_all_categories()
    print(result)
    # print_categories(result)


async def print_categories(categories, level=0):
    if not categories:
        return

    for cat in categories:
        # –û—Ç—Å—Ç—É–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        indent = "  " * level
        # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        # print(f"{indent}\n{cat['name']} ({len(cat['subcategories'])} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π): level{level}")
        print(f"{indent}\n{cat}: level{level}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö

        if cat.get('subcategories', None):
            await print_categories(cat['subcategories'], level + 2)


async def create_browser_session(p: Playwright) -> tuple[Browser, BrowserContext]:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É Playwright.

    Args:
        p (Playwright): –≠–∫–∑–µ–º–ø–ª—è—Ä Playwright.

    Returns:
        tuple[Browser, BrowserContext]: –≠–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    browser = await p.chromium.launch(
        headless=True,
        # headless=False,
        timeout=60000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        slow_mo=0  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–º—Å)
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
    context = await browser.new_context(
        viewport={'width': 1280, 'height': 720},
        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    )

    return browser, context


async def route_handler(route, request):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ "–ª–∏—à–Ω–∏—Ö" —Ä–µ—Å—É—Ä—Å–æ–≤ (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏)"""
    try:
        blocked_types = ["image", "font", "stylesheet", "media", "other"]
        if request.resource_type in blocked_types:
            await route.abort()
        else:
            await route.continue_()
    except Exception as e:
        print(f"Error in route handler for {request.url}: {str(e)}")
        await route.continue_()  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å


async def load_main_categories(context: BrowserContext) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–∞–π—Ç–∞"""
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    page = await context.new_page()
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.route("**/*", route_handler)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await page.goto(
            f"{TARGET_URL}",
            timeout=120000,  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            wait_until="domcontentloaded"  # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∏ DOM, –∞ –Ω–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        )

        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –∫–ª–∏–∫ –ø–æ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        burger_button = await page.wait_for_selector(
            'button.nav-element__burger.j-menu-burger-btn',
            state="visible",
            timeout=30000
        )
        await burger_button.click()

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—é
        await page.wait_for_selector(
            'ul.menu-burger__main-list a.menu-burger__main-list-link:has-text("–ë—Ä–µ–Ω–¥—ã")',
            state="visible",
            timeout=30000
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        main_categories = await page.query_selector_all(
            'ul.menu-burger__main-list > li.menu-burger__main-list-item'
        )

        result = []
        for category in main_categories:
            try:
                category_link = await category.query_selector('a.menu-burger__main-list-link')
                if not category_link:
                    continue

                name = (await category_link.inner_text()).strip()
                if name.lower() in EXCLUDED_CATEGORIES:
                    continue

                result.append({
                    'name': name,
                    'url': await category_link.get_attribute('href'),
                    'data_menu_id': await category.get_attribute('data-menu-id'),
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                continue

        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ load_main_categories: {e}")
        return []
    finally:
        await page.close()
        del page
        gc.collect()


async def load_subcategories(
        category: dict,
        all_categories: list,
        context: BrowserContext,
        sem: asyncio.Semaphore,
        level: int = 1
) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    async with sem:
        print(
            f'{level * "-"} {category["name"]} - [–†–æ–¥–∏—Ç–µ–ª—å: {category.get("parent") if category.get("parent") else "–ù–µ—Ç!"}]')
        page = await context.new_page()
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # await page.route("**/*", route_handler)

            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            await page.goto(
                f"{TARGET_URL}{category['url']}",
                timeout=120000,
                wait_until="domcontentloaded"
            )

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            result = await _extract_subcategories(page, category, all_categories, level)

            if result:
                new_all_categories = [i['name'] for i in result]
                print(f'–ü–æ–ª—É—á–∞—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {level}')
                sub_sem = asyncio.Semaphore(5)
                tasks = [load_subcategories(subcat, new_all_categories, context, sub_sem, level + 1) for subcat in result]
                category['subcategories'] = await asyncio.gather(*tasks, return_exceptions=False)

            return category

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}: {str(e)}")
            return category
        finally:
            await page.close()
            del page
            gc.collect()


async def _extract_subcategories(
        page: Page,
        category: dict,
        all_categories: list,
        level: int
) -> list:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    # # üîç –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
    # tracemalloc.start()
    # snapshot_before = tracemalloc.take_snapshot()

    result = []

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            await page.wait_for_selector(
                'ul.menu-category__subcategory',
                state="visible",
                timeout=1500
            )
            menu_items = await page.query_selector_all(
                'li.menu-category__subcategory-item'
            )
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for item in menu_items:
                link = await item.query_selector('a.menu-category__subcategory-link')
                if link:
                    result.append({
                        'name': (await link.inner_text()).strip(),
                        'url': await link.get_attribute('href'),
                        'parent': category['name'],
                    })
        except:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_selector(
                'ul.menu-category__list',
                state="visible",
                timeout=1500
            )
            menu_items = await page.query_selector_all(
                'li.menu-category__item'
            )
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for item in menu_items:
                if await item.query_selector('p.menu-category__item'):
                    continue

                link = await item.query_selector('a.menu-category__link')
                if link:
                    result.append({
                        'name': (await link.inner_text()).strip(),
                        'url': await link.get_attribute('href'),
                        'parent': category['name'],
                    })
        return result

    except:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
        return await _extract_alternative_structure(page, category, all_categories, level)

    # finally:
    #     # üì∏ –°–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    #     snapshot_after = tracemalloc.take_snapshot()
    #     stats = snapshot_after.compare_to(snapshot_before, 'lineno')
    #
    #     print(f"\nüìà [–¢–æ–ø 5 –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –ø–∞–º—è—Ç–∏ –≤ _extract_subcategories (level={level})]:")
    #     for i, stat in enumerate(stats[:5]):
    #         print(f"{i + 1}. {stat}")
    #
    #     tracemalloc.stop()
    #
    # return result


async def _extract_alternative_structure(
        page: Page,
        category: dict,
        all_categories: list,
        level: int
) -> list | None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö)"""
    result = []

    try:
        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        await page.wait_for_timeout(1500)
        show_all_filter = page.locator("div.dropdown-filter:has-text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')")
        await page.wait_for_timeout(1500)
        if await show_all_filter.count() >= 2:
            await show_all_filter.nth(1).hover()

            show_all_buttons = page.locator("button.filter__show-all:has-text('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ')")
            await page.wait_for_timeout(1500)
            if await show_all_buttons.count() >= 2:
                await show_all_buttons.nth(1).click()

            # –°–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            all_items = []
            count_items = 0
            while True:
                current_items = await page.query_selector_all('li.filter__item')
                if not current_items or count_items == len(current_items):
                    break

                await current_items[-1].hover()
                await page.wait_for_timeout(500)
                count_items = len(current_items)
                all_items = current_items

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞
            for item in all_items:
                link = await item.query_selector('span.checkbox-with-text__text')
                parent_container = await item.evaluate("el => el.closest('.measurementContainer--GRwov') === null")

                if link and parent_container:
                    result.append((await link.inner_text()).strip())

            result.append({'parent': category['name'], 'level': level})
            print(f'{level * "-" + "-"} –ö–∞—Ç–µ–≥–æ—Ä–∏–π {len(result)}, [–†–æ–¥–∏—Ç–µ–ª—å: {category["name"]}], {level}')
            category['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = result
            return None
        else:
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
            await page.wait_for_timeout(1500)
            burger_button = await page.wait_for_selector(
                "button.dropdown-filter__btn--burger > div.dropdown-filter__btn-name",
                timeout=5000
            )
            await burger_button.hover()
            await page.wait_for_timeout(1500)

            # –°–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
            menu_items = await page.query_selector_all('li.filter-category__item')
            for item in menu_items:
                link = await item.query_selector('a.filter-category__link')
                if link:
                    result.append({
                        'name': (await link.inner_text()).strip(),
                        'url': await link.get_attribute('href'),
                        'parent': category['name']
                    })
            new_result = [i['name'] for i in result]
            if new_result != all_categories:
                return result
            else:
                print(f'{level * "-" + "-"} –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ù–ï–¢!, [–†–æ–¥–∏—Ç–µ–ª—å: {category["name"]}], {level}')
                category['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = f'–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç {level}'
                return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
        return None


async def parse_all_categories() -> list | None:
    async with async_playwright() as p:
        browser, context = await create_browser_session(p)

        try:
            print('–ü–æ–ª—É—á–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            list_main_categories = await load_main_categories(context)
            if not list_main_categories:
                raise EmptyCategoriesError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)")

            print('–ü–æ–ª—É—á–∞—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 0')
            sem = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º X –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            all_categories = [category['name'] for category in list_main_categories]
            tasks = [load_subcategories(category, all_categories, context, sem) for category in list_main_categories[13:14]]
            results = await asyncio.gather(*tasks)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —É–¥–∞–ª—è—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            valid_results = [r for r in results if not isinstance(r, Exception)]
            return valid_results

        except EmptyCategoriesError as e:
            print(f"–û—à–∏–±–∫–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É
            return None

        except PlaywrightTimeoutError as e:
            print(f"Timeout error occurred: {e}")
            return None

        except Exception as e:
            print(f"Other error occurred: {e}")
            return None

        finally:
            # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –±—Ä–∞—É–∑–µ—Ä
            await context.close()
            await browser.close()


if __name__ == "__main__":
    asyncio.run(run_wb_parser())
